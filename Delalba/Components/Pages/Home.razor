@page "/"
@inject NavigationManager navigation
@rendermode InteractiveServer
@using Delalba.Components.Pages.Productos

@* @using Microsoft.AspNetCore.Components; *@
@using Delalba.Data;

<PageTitle>Home</PageTitle>

<br />

<h1>Tienda de Productos Delalba!</h1>

<br />
<hr />

Nombre de Producto
<input type="text" placeholder="(Comience con Mayúscula)" @bind-value="filtroNombreProducto" />
<button type="button" class="btn btn-primary" @onclick="BuscarProducto"> Buscar </button>
<button type="button" class="btn btn-primary" @onclick="OpenCarrito"> Carrito </button>

<hr />

@* Modal de Carrito *@
<div class="modal @StatusModal" tabindex="-1" style="display:@StyleDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CARRITO</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseCarrito"></button>
            </div>
            <div class="modal-body">
                @if (CarritoNoNull != false && CarritoList != null && CarritoList.Count != 0)
                {
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                @* <th>N</th>
                                <th>P</th> *@
                            </tr>
                        </thead>

                        <tbody>
                            @foreach (var item in CarritoList)
                            {
                                <tr>
                                    <td>@item.Nombre</td>
                                    <td>$@item.Precio</td>
                                    <button type="button" class="btn btn-link" @onclick="() => EliminarProducto(item)">Eliminar</button>
                                </tr>
                                PrecioTotal = PrecioTotal + @item.Precio;
                            }
                        </tbody>
                        <thead>
                            <tr>
                                <td>Total</td>
                                <td>$@PrecioTotal</td>
                            </tr>
                        </thead>
                    </table>
                }
                else
                {
                    <p>El carrito está vacío.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseCarrito">Cerrar</button>
                @if (CarritoNoNull != false && CarritoList != null && CarritoList.Count != 0)
                {
                    <button type="button" class="btn btn-primary" @onclick="OpenConfirmacion">Hacer pedido</button>
                }
            </div>
        </div>
    </div>
</div>

@* Modal de Confirmacion *@
<div class="modal @StatusConfirmacion" tabindex="-1" style="display:@StyleDisplayConfirmacion">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">CARRITO</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="CloseConfirmacion"></button>
            </div>
            <div class="modal-body">
                @if (CarritoNoNull != false && CarritoList != null && CarritoList.Count != 0)
                {
                    <p>Su pedido será armado y debe pasarse a buscar al local.</p>
                    <a href="https://maps.app.goo.gl/NnHPDzfp5Szg2w7P8" target="_blank"> Ver local en Google Maps </a>
                    <p></p>
                    <p>¿Desea confirmar?</p>
                }
                else
                {
                    <p>El carrito está vacío.</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="CloseConfirmacion">Cerrar</button>
                @if (CarritoNoNull != false && CarritoList != null && CarritoList.Count != 0)
                {
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarPedido">Confirmar pedido</button>
                }
            </div>
        </div>
    </div>
</div>


<ProductosListado Datos="@ProductosList" MostrarBotones="false" MostrarBotonCarrito="true" AñadirAlCarritoEvent="AñadirAlCarrito" LoginEvent="Login"/>

<AuthorizeView Roles="Admin">
    <Authorized>
        <button @onclick="IrMaestro"> Ir a Maestro</button>
    </Authorized>
</AuthorizeView>

<AuthorizeView>
    <NotAuthorized>
        <p>Registrese o ingrese al sistema para más funcionalidad</p>
        <button @onclick="Login">Registrarse</button>
    </NotAuthorized>
</AuthorizeView>

@code {
    //BUSCAR
    public string filtroNombreProducto = "";

    private void BuscarProducto()
    {
        GetData();

        ProductosList.Select(c => new ProductoEntity()
            {
                Nombre = c.Nombre,
                Precio = c.Precio,
            }).ToList();

        if (filtroNombreProducto != "")
        {
            ProductosList = ProductosList.Where(c => c.Nombre.Contains(filtroNombreProducto)).ToList();
        }

        //if (filtroNombreProducto != "")
        //{
        //    ProductosList = ProductosList.Where(c => c.Nombre == filtroNombreProducto).ToList();
        //}

        context.SaveChanges();
    }

    //CARRITO HTML
    private string StatusModal = "fade";
    private string StyleDisplay = "none";
    private bool CarritoNoNull = false;

    public void OpenCarrito()
    {
        StatusModal = "show";
        StyleDisplay = "block";
        PrecioTotal = 0;
        StateHasChanged();
    }

    public void CloseCarrito()
    {
        StatusModal = "fade";
        StyleDisplay = "none";
        StateHasChanged();
    }

    private void EliminarProducto(ProductoEntity productoEliminar)
    {
        CarritoList.Remove(productoEliminar);
        PrecioTotal = 0;
        context.SaveChanges();
        GetData();
    }

    //MODAL DE CONFIRMACIÓN
    private string StatusConfirmacion = "fade";
    private string StyleDisplayConfirmacion = "none";

    public void OpenConfirmacion()
    {
        StatusConfirmacion = "show";
        StyleDisplayConfirmacion = "block";
        StatusModal = "fade";
        StyleDisplay = "none";
        StateHasChanged();
    }

    public void CloseConfirmacion()
    {
        StatusConfirmacion = "fade";
        StyleDisplayConfirmacion = "none";
        StateHasChanged();
    }

    public void ConfirmarPedido()
    {
        StatusConfirmacion = "fade";
        StyleDisplayConfirmacion = "none";
        CarritoList.Clear();
        StateHasChanged();
    }

    //VARIABLES
    private ProductoEntity? ProductoCarrito;

    public List<ProductoEntity>? CarritoList = new();

    private int PrecioTotal = 0;

    //METODOS
    private void AñadirAlCarrito(ProductoEntity productoCarrito)
    {
        ProductoCarrito = productoCarrito;
        CarritoList.Add(ProductoCarrito);
        CarritoNoNull = true;
        context.SaveChanges();
        GetData();
    }

    //NAVIGATE
    private void IrMaestro()
    {
        navigation.NavigateTo("productos");
    }

    private void Login()
    {
        navigation.NavigateTo("Account/Register");
    }



    // COPIED FROM PRODUCTOS PAGE
    [Inject]
    private ApplicationDbContext context { get; set; }

    public List<ProductoEntity> ProductosList;

    // (variable para filtrar producto)
    // public string filtroNombreProducto = "";
    

    protected override void OnInitialized()
    {
        base.OnInitialized();
        GetData();
    }

    private void GetData()
    {
        ProductosList = context.Productos.ToList();
        ProductosList = ProductosList.OrderBy(p => p.Nombre).ToList();
    }
}