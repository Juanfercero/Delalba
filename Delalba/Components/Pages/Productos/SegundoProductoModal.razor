@rendermode InteractiveServer

<!-- Modal -->
<div class="modal @StatusModal" tabindex="-1" style="display:@StyleDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@(Modificando ? "Modificando" : "Nuevo") Producto</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Data != null)
                {
                    <form>
                        <div class="mb-3">
                            <label for="recipient-nombre" class="col-form-label">Nombre del Producto:</label>
                            <input type="text" class="form-control" id="recipient-nombre" @bind="Data.Nombre">
                        </div>
                        <div class="mb-3">
                            <label for="message-precio" class="col-form-label">Precio:</label>
                            <input type="text" class="form-control" id="message-precio" @bind="Data.Precio">
                        </div>
                        <div class="mb-3">
                            <label for="message-Foto" class="col-form-label">Foto:</label>
                            <InputFile OnChange="HandleFileUpload" />
                            <p>@fileName</p>
                        </div>
                    </form>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Close">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="() => GuardarEventCallback.InvokeAsync()">Guardar</button>
            </div>
        </div>
    </div>
</div>



@code {
    [Parameter]
    public ProductoEntity? Data { get; set; }
    [Parameter]
    public EventCallback GuardarEventCallback { get; set; }
    [Parameter]
    public bool Modificando { get; set; } = false;

    private string StatusModal = "fade";
    private string StyleDisplay = "none";

    private string ModalTitle => Modificando ? "Modificando Producto" : "Nuevo Producto";

    // Método para abrir el modal
    public void Open()
    {
        StatusModal = "show";
        StyleDisplay = "block";
        StateHasChanged();
    }

    // Método para cerrar el modal
    public void Close()
    {
        StatusModal = "fade";
        StyleDisplay = "none";
        StateHasChanged();
    }

    // Tutorial de "En mi maquina si funciona" canal de youtube. Blazor webassembly - PWA - cámara de celular - Parte I.
    // El paquete del video Ya no se usa. Viene integado después de .net 8
    private string? fileName;

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        var maxFileSize = 1024 * 1024; // 1 MB
        var buffer = new byte[8192]; // Lee 8 KB por iteración

        try
        {
            var file = e.File;

            using var stream = file.OpenReadStream(maxFileSize);
            int bytesRead;
            while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
            {
                // Procesa los datos en el buffer (bytesRead contiene la cantidad leída)
            }

            Console.WriteLine($"Archivo {file.Name} procesado correctamente.");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error procesando el archivo: {ex.Message}");
        }
    }

}

    
