@rendermode InteractiveServer

<!-- Modal -->
<div class="modal @StatusModal" tabindex="-1" style="display:@StyleDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@(Modificando ? "Modificando" : "Nuevo") Producto</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (Data != null)
                {
                    <form>
                        <div class="mb-3">
                            <label for="recipient-nombre" class="col-form-label">Nombre del Producto:</label>
                            <input type="text" class="form-control" id="recipient-nombre" @bind="Data.Nombre">
                        </div>
                        <div class="mb-3">
                            <label for="message-precio" class="col-form-label">Precio:</label>
                            <input type="text" class="form-control" id="message-precio" @bind="Data.Precio">
                        </div>
                        <!-- Área de Drag and Drop para cargar la imagen -->
                        <div class="mb-3">
                            <div class="dropzone border border-primary rounded text-center p-3"
                                 @ondragover="OnDragOver"
                                 @ondrop="OnDropFile"
                                 @ondragleave="OnDragLeave"
                                 style="min-height: 150px; cursor: pointer;"
                                 title="Arrastra una imagen aquí o suéltala">
                                <p class="m-0">@DragDropMessage</p>
                                @if (imageData != null)
                                {
                                    <p>Imagen seleccionada con éxito. Tamaño: @imageData.Length bytes</p>
                                    <img src="data:image/png;base64,@Convert.ToBase64String(imageData)" alt="Vista previa" class="img-thumbnail" />
                                }
                            </div>
                        </div>
                    </form>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Close">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="() => GuardarEventCallback.InvokeAsync()">Guardar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ProductoEntity? Data { get; set; }
    [Parameter]
    public EventCallback GuardarEventCallback { get; set; }
    [Parameter]
    public bool Modificando { get; set; } = false;

    private byte[]? imageData; // Contendrá los datos de la imagen cargada
    private string StatusModal = "fade";
    private string StyleDisplay = "none";
    private string DragDropMessage = "Arrastra una imagen aquí o suéltala"; // Mensaje de instrucción

    private string ModalTitle => Modificando ? "Modificando Producto" : "Nuevo Producto";

    // Método para abrir el modal
    public void Open()
    {
        StatusModal = "show";
        StyleDisplay = "block";
        StateHasChanged();
    }

    // Método para cerrar el modal
    public void Close()
    {
        StatusModal = "fade";
        StyleDisplay = "none";
        StateHasChanged();
    }

    // Método para manejar cuando el archivo se arrastra sobre el área de Drop
    private void OnDragOver(DragEventArgs e)
    {
        e.PreventDefault(); // Prevenir el comportamiento por defecto del navegador
        DragDropMessage = "¡Suelta la imagen!";
        StateHasChanged();
    }

    // Método para manejar cuando el archivo deja el área de Drop
    private void OnDragLeave()
    {
        DragDropMessage = "Arrastra una imagen aquí o suéltala";
        StateHasChanged();
    }

    // Método para manejar cuando se suelta un archivo
    private async Task OnDropFile(DragEventArgs e)
    {
        try
        {
            e.PreventDefault(); // Prevenir el comportamiento por defecto del navegador
            DragDropMessage = "Procesando imagen...";
            StateHasChanged();

            // Verifica si DataTransfer y Files no son nulos
            if (e.DataTransfer?.Files != null && e.DataTransfer.Files.Any())
            {
                var file = e.DataTransfer.Files.First(); // Obtén el primer archivo
                if (file != null)
                {
                    await ProcessFile(file); // Procesa el archivo
                    DragDropMessage = "Imagen cargada con éxito.";
                }
                else
                {
                    DragDropMessage = "El archivo no es válido.";
                }
            }
            else
            {
                DragDropMessage = "No se detectaron archivos arrastrados.";
            }
        }
        catch (Exception ex)
        {
            DragDropMessage = $"Ocurrió un error: {ex.Message}";
        }
        finally
        {
            StateHasChanged();
        }
    }

    // Método para procesar el archivo (limitarlo a 2 MB)
    private async Task ProcessFile(IBrowserFile file)
    {
        // Limitar tamaño de archivo a 2 MB
        if (file.Size > 2 * 1024 * 1024)
        {
            DragDropMessage = "El archivo excede el tamaño permitido (2 MB).";
            return;
        }

        // Leer archivo como un flujo de bytes
        using var stream = file.OpenReadStream(2 * 1024 * 1024); // Máximo 2 MB
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        imageData = memoryStream.ToArray(); // Almacena la imagen como un arreglo de bytes
    }
}
