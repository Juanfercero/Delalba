@* @using Delalba.Components.Entities; *@

@rendermode InteractiveServer

<!-- Modal -->
<div class="modal @StatusModal" tabindex="-1" style="display:@StyleDisplay">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">@(Modificando ? "Modificando" : "Nuevo") Producto</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if(Data != null)
                {
                    <form>
                        <div class="mb-3">
                            <label for="recipient-nombre" class="col-form-label">Nombre del Producto:</label>
                            <input type="text" class="form-control" id="recipient-nombre" @bind="Data.Nombre">
                        </div>
                        <div class="mb-3">
                            <label for="message-precio" class="col-form-label">Precio:</label>
                            <input type="text" class="form-control" id="message-precio" @bind="Data.Precio">
                        </div>
                        <div class="mb-3">
                            @* <InputFile OnChange="HandleFileSelected" />
                            @if (imageData != null)
                            {
                                <p>Imagen seleccionada con éxito. Tamaño: @imageData.Length bytes</p>
                            } *@
                            @* <label for="message-foto" class="col-form-label">Foto:</label>
                            <inputFile type="file" class="form-control" id="message-foto" @bind="imageData" /> *@
                            @* <input type="file" class="form-control" id="message-foto" @bind="PictureFile" /> *@
                        </div>
                    </form>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Close">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="() => GuardarEventCallback.InvokeAsync()">Guardar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public ProductoEntity? Data { get; set; }
    [Parameter]
    public EventCallback GuardarEventCallback { get; set; }
    [Parameter]
    public bool Modificando { get; set; } = false;

    // //No se usa
    // [Parameter]
    // public string PictureFile { get; set; } = "";

    // private byte[]? imageData;


    private string StatusModal = "fade";
    private string StyleDisplay = "none";


    public void Open()
    {
        StatusModal = "show";
        StyleDisplay = "block";
        StateHasChanged();
    }

    public void Close()
    {
        StatusModal = "fade";
        StyleDisplay = "none";
        StateHasChanged();
    }

    // //No se usa
    // private void SelectedPicture(InputFileChangeEventArgs args)
    // {
    //     byte[] arrayFile = File.ReadAllBytes(PictureFile);
    // }

    // // Método para manejar el cambio de archivo (cuando se selecciona la imagen)
    // private async Task HandleFileSelected(InputFileChangeEventArgs e)
    // {
    //     var file = e.File;

    //     if (file != null)
    //     {
    //         // Lee el archivo como un arreglo de bytes
    //         var buffer = new byte[file.Size];
    //         await file.OpenReadStream().ReadAsync(buffer);
    //         imageData = buffer; // Almacena el arreglo de bytes
    //     }
    // }

    
}
